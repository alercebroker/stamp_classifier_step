import abc
import os
from typing import List

import pandas as pd


class BaseStrategy(abc.ABC):
    """Strategy base class."""

    def __init__(self, default_name: str, default_version: str):
        """Initialize the strategy.

        Specific classifier models should be implemented/imported in subclasses.

        Args:
            default_name (str): Classifier name (used if environment variable `MODEL_NAME` is not defined)
            default_version (str): Classifier version (used if environment variable `MODEL_VERSION` is not defined)
        """
        self.name = os.getenv("MODEL_NAME", default_name)
        self.version = os.getenv("MODEL_VERSION", default_version)

    @staticmethod
    def _sort_probabilities(obj_probabilities: dict) -> List[tuple]:
        """Sorts class name to probability mapping from highest to lowest probability.

        Args:
            obj_probabilities (dict): Mapping from class names to probabilities

        Returns:
            list[tuple]: Sorted list of 2-tuples with first value being class name and second the probability
        """
        return sorted(obj_probabilities.items(), key=lambda x: x[1], reverse=True)

    def _with_ranking(self, raw_probabilities: dict):
        """Adds ranking and classifier metadata to raw probabilities

        Args:
            raw_probabilities (dict): Mapping from AID to another mapping from class names to probabilities

        Returns:
            dict: Dictionary with AIDs as keys and a list of dictionaries with probabilities as values
        """
        return {
            aid: [
                {
                    "classifier_name": self.name,
                    "classifier_version": self.version,
                    "class_name": cls,
                    "probability": prob,
                    "ranking": i + 1,
                }
                for i, (cls, prob) in enumerate(self._sort_probabilities(obj))
            ]
            for aid, obj in raw_probabilities.items()
        }

    @abc.abstractmethod
    def predict(self, df: pd.DataFrame) -> pd.DataFrame:
        """Call the prediction method of the model.

        Args:
            df (pd.DataFrame): Data generated by `_to_dataframe`

        Returns:
            pd.DataFrame: Class probabilities. Its columns should be the classifier's classes, and indexed by AID
        """

    @abc.abstractmethod
    def _to_dataframe(self, messages: List[dict]) -> pd.DataFrame:
        """Generate input data frame for model predictor. The output is sorted by date.

        Args:
            messages (list[dict]): List of messages containing alert data

        Returns:
            pd.DataFrame: Data frame used by the model predictor. Index must be AID, the columns depend on the model
        """

    def get_probabilities(self, messages: List[dict]) -> dict:
        """Get stamp probabilities for each object (duplicate objects only keep the earliest stamp).

        Args:
            messages (list[dict]): List of messages containing alert data

        Returns:
            dict: Dictionary with AIDs as keys and a list of dictionaries with probabilities as values, e.g.:

            .. code-block:: py
               {
                   "AID1": [
                       {
                           "classifier_name": "ztf_stamp_classifier",
                           "classifier_version": "1.0.0",
                           "class_name": "SN",
                           "probability": 0.8,
                           "ranking": 1
                       },
                       ...
                   ]
               }

            There is one entry in the list for each class in the classifier.
        """
        df = self._to_dataframe(messages)
        df = df[~df.index.duplicated(keep="first")]
        return self._with_ranking(self.predict(df).to_dict(orient="index"))
