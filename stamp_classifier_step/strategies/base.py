import abc
import os
from typing import List

import pandas as pd


class BaseStrategy(abc.ABC):
    """Strategy base class."""

    def __init__(self, default_name: str, default_version: str):
        """Initialize the strategy.

        Specific classifier models should be implemented/imported in subclasses.

        Args:
            default_name (str): Classifier name (used if environment variable `MODEL_NAME` is not defined)
            default_version (str): Classifier version (used if environment variable `MODEL_VERSION` is not defined)
        """
        self.name = os.getenv("MODEL_NAME", default_name)
        self.version = os.getenv("MODEL_VERSION", default_version)

    @abc.abstractmethod
    def predict(self, df: pd.DataFrame) -> pd.DataFrame:
        """Call the prediction method of the model.

        Args:
            df (pd.DataFrame): Data generated by `_to_dataframe`

        Returns:
            pd.DataFrame: Class probabilities. Its columns should be the classifier's classes, and indexed by AID
        """

    @abc.abstractmethod
    def _to_dataframe(self, messages: List[dict]) -> pd.DataFrame:
        """Generate input data frame for model predictor. The output is sorted by date.

        Args:
            messages (list[dict]): List of messages containing alert data

        Returns:
            pd.DataFrame: Data frame used by the model predictor. Index must be AID, the columns depend on the model
        """

    def get_probabilities(self, messages: List[dict]) -> dict:
        """Get stamp probabilities for each object (duplicate objects only keep the earliest stamp).

        Args:
            messages (list[dict]): List of messages containing alert data

        Returns:
            dict: Dictionary with AIDs as keys and a mapping of class to probability as values, e.g.:

                .. code-block:: python
                   {
                       "AID1": {
                           "class1": 0.12,
                           "class2": 0.14,
                           ...: ...
                       },
                       ...: ...
                   }
        """
        df = self._to_dataframe(messages)
        df = df[~df.index.duplicated(keep="first")]
        as_dict = self.predict(df).to_dict(orient="index")
        return as_dict

    def _insert_classifier_metadata(self, raw_probabilities):
        """

        Args:
            raw_probabilities (dict): Mapping from AIDs to a mapping of class to probability, e.g.:

                .. code-block:: python
                   {
                       "AID1": {
                           "class1": 0.12,
                           "class2": 0.14,
                           ...: ...
                       },
                       ...: ...
                   }

        Returns:
            dict: As input, but each entry has now step metadata, e.g.:

                .. code-block:: python
                   {
                       "AID1": {
                           "classifier_name": "name",
                           "classifier_version": "1.0.0",
                           "class1": 0.12,
                           "class2": 0.14,
                           ...: ...
                       },
                       ...: ...
                   }
        """
        return {
            aid: {
                "classifier_name": self.name,
                "classifier_version": self.version,
                **probs,
            }
            for aid, probs in raw_probabilities.items()
        }
